.pio_version 0 // only requires PIO version 0

.program i2c_bus_analyzer

;make sure the program is loaded at addr 0, this allows us to easily reset it to 0
.origin 0

;pin 0 is SDA (GPIO 0, physical pin 1)
;pin 1 is SCL (GPIO 1, physical pin 2)

;RP2040 datasheet page 360 has example waveform for I2C.
;The book of I2C explains start/stop bits on pages 17-19.

;Remember that we have GPIO 0 connected to GPIO2, GPIO 1 connected to GPIO 3
;This means SDA=0, SCL=1 will get repeated as 0b1010

.wrap_target
wait_for_start:
    wait 0 pin 0                      ;wait for logic 0 on pin 0 (SDA) which is the start bit
    mov x, pins                       ;move pin values to x
    set y, 0b1010                     ;make sure SDA is low with SCL high
    jmp x!=y wait_for_start
    mov isr, y                        ;add 0b1010 to the input shift register, when the main thread detects this it will mean a start bit


    wait 0 pin 1                      ;wait for SCL to go low


wait_for_byte:
    set x, 8                          ;loop 9 times, each time we will shift in a bit of data, 8 bits of data + ACK/NACK
wait_for_new_bit:
    wait 1 pin 1 [8]                  ;SCL goes high, delay some cycles since it is not edge triggered, may need to adjust this if using high bus speeds
    in pins, 1                        ;grab SDA
    wait 0 pin 1                      ;SCL goes low
    jmp x-- wait_for_new_bit          ;get more bits if we need to, jump if x!=0, it decrements after we do the check
    push                              ;push the 9 bits (plus the start bit if we put it in isr) to the FIFO so the system can grab it, isr gets cleared


    wait 1 pin 1
    set x, 7                          ;if we get a stop then x will be a known value, it also sets up the loop counter in case there is another byte
    in pins, 1                        ;grab SDA in case it is another byte transfer


                                      ;at this point SCL is 1 so it could be 10 or 11
                                      ;there are four things that could happen:
                                      ;10 -> 11 is a stop
                                      ;10 -> 00 is a new byte
                                      ;11 -> 10 is a start
                                      ;11 -> 01 is a new byte

    jmp pin wait_for_byte_or_start    ;the jmp pin is pin 0, jump if the value is 1


wait_for_byte_or_stop:                ;it's 10 so wait for new byte or stop
    jmp pin stop                      ;if it changes to 11 then it's a stop

    mov y, pins                       ;move the pin values to y
    jmp !y wait_for_new_bit           ;if it's 00 then it's a byte, and we already grabbed the first bit

    jmp wait_for_byte_or_stop         ;it must still be 10, loop again


wait_for_byte_or_start:               ;it's 11 so wait for new byte or start
    mov x, pins                       ;move pin values to x
    set y, 0b0101                     ;if it's 01 then it's a byte
    jmp x!=y check_for_start          ;if not equal to (01)01 then jump a few instructions ahead to do another check
    set x, 7                          ;it is 01, it's a byte, set up x again
    jmp wait_for_new_bit
check_for_start:
    set y, 0b1010                     ;if it's 10 it's a start
    jmp x!= y wait_for_byte_or_start  ;if it's not 10 then it must still be 11, in that case loop again
    jmp wait_for_start                ;it is 10, it's a start


stop:
    mov isr, ~x                       ;at this point x should always be 7, complement of x is 0xFFFFFF8
    push                              ;push the complement of x which main thread can interpret as a stop

.wrap
